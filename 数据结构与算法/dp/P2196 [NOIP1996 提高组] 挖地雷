/*
题意：
在一个地图上有NN个地窖(N \le 20)(N≤20)，每个地窖中埋有一定数量的地雷。同时，给出地窖之间的连接路径。当地窖及其连接的数据给出之后，某人可以从任一处开始挖地雷，然后可以沿着指出的连接往下挖（仅能选择一条路径），当无连接时挖地雷工作结束。设计一个挖地雷的方案，使某人能挖到最多的地雷。

输入格式
有若干行。

第11行只有一个数字，表示地窖的个数NN。

第22行有NN个数，分别表示每个地窖中的地雷个数。

第33行至第N+1N+1行表示地窖之间的连接情况：

第33行有n-1n?1个数（00或11），表示第一个地窖至第22个、第33个、…、第nn个地窖有否路径连接。如第33行为1 1 0 0 0 … 011000…0，则表示第11个地窖至第22个地窖有路径，至第33个地窖有路径，至第44个地窖、第55个、…、第nn个地窖没有路径。

第44行有n-2n?2个数，表示第二个地窖至第33个、第44个、…、第nn个地窖有否路径连接。

… …

第n+1n+1行有11个数，表示第n-1n?1个地窖至第nn个地窖有否路径连接。（为00表示没有路径，为11表示有路径）。

输出格式
有两行

第一行表示挖得最多地雷时的挖地雷的顺序，各地窖序号间以一个空格分隔，不得有多余的空格。

第二行只有一个数，表示能挖到的最多地雷数。
题解：懂得都懂 记忆搜索就完了 
*/ 
#include<iostream>
//#incude<algorithm>
using namespace std;
const int N=30;
int dp[N];//以N开始的最大价值 
int mp[N][N];
int v[N]; 
int n;
int road[N];
int dfs(int u)
{
	if(dp[u])return dp[u];
	for(int i=1;i<=n;i++)
	{
		if(mp[u][i])
		{
			if(dp[u]<dp[i])
			{
				dp[u]=dp[i];
				road[u]=i;
			}
		}
	}
	return dp[u]=dp[u]+v[u];
}
void print(int u)
{
	if(u)
	{
		print(road[u]);
		cout<<u<<" ";
	}
}
int main()
{
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>v[i];
	}
	for(int i=1;i<n;i++)
	{
		for(int j=i+1;j<=n;j++)
		{
			cin>>mp[i][j];
			mp[j][i]=mp[i][j]; 
		}
	}
	int res=0; 
	int resi=0;
	for(int i=1;i<=n;i++)
	{
		if(res<dfs(i))
		{
			resi=i;
			res=dp[i];
		}
	}
	print(resi);
	cout<<endl;
	cout<<res<<endl;
	
	return 0;
 } 
