/*
题意：
Michael 喜欢滑雪。这并不奇怪，因为滑雪的确很刺激。
可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，
你不得不再次走上坡或者等待升降机来载你。Michael 想知道在一个区域中最长的滑坡。
区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：

1   2   3   4   5
16  17  18  19  6
15  24  25  20  7
14  23  22  21  8
13  12  11  10  9
一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度会减小。在
上面的例子中，一条可行的滑坡为 2424－1717－1616－11（从 2424 开始，在 11 结束）。
当然 2525－2424－2323－\ldots…－33－22－11 更长。事实上，这是最长的一条。 
题解：我只能说懂得都懂 记忆搜索入门模板题目 每次算过的记录一下就行了 
*/ 
#include<iostream>
#include<algorithm>
using namespace std;
const int N=150;
int n,m;
int dp[N][N];
int h[N][N];
int res=0;
int ne[4][2]={0,1,1,0,-1,0,0,-1};
int dfs(int x,int y)
{
	if(dp[x][y]!=-1)return dp[x][y];
	dp[x][y]=1;
	for(int i=0;i<4;i++)
	{
		int dx=x+ne[i][1];
		int dy=y+ne[i][0];
		if(dx<=n&&dx>=1&&dy<=m&&dy>=1&&h[x][y]>h[dx][dy])
		{
			dp[x][y]=max(dp[x][y],dfs(dx,dy)+1);
		}
	}
	return dp[x][y];
}
int main()
{
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
		{
			cin>>h[i][j];
			dp[i][j]=-1; 
		}
	 } 
	 for(int i=1;i<=n;i++)
	 {
	 	for(int j=1;j<=m;j++)
	 	{
	 		res=max(res,dfs(i,j));
		 }
	  } 
	  cout<<res<<endl;
	return 0;
}
