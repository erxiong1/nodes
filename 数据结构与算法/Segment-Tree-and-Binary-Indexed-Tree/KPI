/*
题意：你工作以后, KPI 就是你的全部了. 我开发了一个服务，取得了很大的知名度。数十亿的请求被推到一个大管道后同时服务从管头拉取请求。让我们来定义每个请求都有一个重要值。我的KPI是由当前管道内请求的重要值的中间值来计算。现在给你服务记录，有时我想知道当前管道内请求的重要值得中间值。
Input
有大约100组数据。

每组数据第一行有一个n(1≤n≤10000)，代表服务记录数。

接下来有n行，每一行有3种形式
  "in x": 代表重要值为x(0≤x≤109)的请求被推进管道。
  "out": 代表服务拉取了管道头部的请求。
  "query: 代表我想知道当前管道内请求重要值的中间值. 那就是说，如果当前管道内有m条请求, 我想知道，升序排序后第floor(m/2)+1th 条请求的重要值.

为了让题目简单，所有的x都不同，并且如果管道内没有值，就不会有"out"和"query"操作。
Output
对于每组数据，先输出一行

Case #i:
然后每一次"query"，输出当前管道内重要值的中间值。
题解：
主席树板子套就是了 不过要离散化处理一下
对于查询第K大 如果前面有sum个数>k 那么查询左边
如果不存在 我们就看右子区间 对于右子区间 我们要不受前面影响  
所有我们把k加上一个左儿子的sum 那么相对来讲 查右儿子相当于一个正确查询 
*/
#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<algorithm>
#include<queue>
using namespace std;
vector<int >alls;
vector<int >op;
const int N=10000+100;
struct node
{
	int l,r;
	int sum;
	int add;
}tr[N*4];
void build(int u,int l,int r)
{
	
	tr[u]={l,r,0,0};
	if(l==r)return ;
	int mid=(l+r)>>1; 
	build(u<<1,l,mid);
	build(u<<1|1,mid+1,r);
	return ;
 } 
int find(int x)
{
	return lower_bound(alls.begin(),alls.end(),x)-alls.begin()+1;
}
void pushup(int u)
{
	tr[u].sum=tr[u<<1].sum+tr[u<<1|1].sum;
	return ;
}
void modify(int u,int x,int k)
{
	if(tr[u].l==tr[u].r&&tr[u].l==x)
	{
		tr[u].sum+=k;
		return ;
	}
	int mid=(tr[u].l+tr[u].r)>>1;
	if(x<=mid)modify(u<<1,x,k);
	else modify(u<<1|1,x,k);
	pushup(u);
	return ; 
}
int query(int u,int k)
{
	if(tr[u].l==tr[u].r)return tr[u].l;
	if(tr[u<<1].sum>=k)
	{
		return query(u<<1,k);
	 } 
	 else return query(u<<1|1,k-tr[u<<1].sum);
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int n;
	int tot=0;
	while(cin>>n)
	{	
		alls.clear();
		op.clear();
		queue<int > que;
		queue<int >temp;
		for(int i=1;i<=n;i++)
		{
			string a;
			cin>>a;
			if(a=="in")
			{
				int x;
				cin>>x;
				alls.push_back(x);
				temp.push(x);
				op.push_back(1);
			}
			else if(a=="out")
			{
				op.push_back(2);
			}
			else if(a=="query")
			{
				op.push_back(3);
			}
		}
		cout<<"Case #"<<++tot<<":"<<endl;	
		sort(alls.begin(),alls.end());
//		cout<<111111111111111<<endl;
//		for(int i=0;i<alls.size();i++)
//		{
//			cout<<alls[i]<<endl;
//		}
		alls.erase(unique(alls.begin(),alls.end()),alls.end());
		build(1,1,alls.size());
	//	cout<<111111111111111111<<endl;
		for(int i=1;i<=n;i++)
		{
		
// 		for(auto &kk : que){
// 			cout<<kk<<endl;
// 		}
			if(op[i-1]==1)
			{
				int x = temp.front();
				que.push(x);
				modify(1,find(x),1);
				temp.pop();
			 } 
			 else if(op[i-1]==2)
			 {
			    int x=que.front();
			    modify(1,find(x),-1);
			 	que.pop();
			 }
			 else 
			 {
			 	int k=que.size()/2+1;
			 //	cout<<k<<endl;
			 	int i=query(1,k);
			 //	cout<<i<<endl;
			 	cout<<alls[i-1]<<endl;
			 }
		}
		
	 } 
	return 0;
}
