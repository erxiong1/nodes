/*
题意：奶牛们最近的旅游计划，是到苏必利尔湖畔，
享受那里的湖光山色，以及明媚的阳光。作为整个
旅游的策划者和负责人，贝茜选择在湖边的一家著
名的旅馆住宿。这个巨大的旅馆一共有N 间客房，
它们在同一层楼中顺次一字排开，在任何一个房间
里，只需要拉开窗帘，就能见到波光粼粼的湖面。

贝茜一行，以及其他慕名而来的旅游者，都是一批
批地来到旅馆的服务台，希望能订到D_i (1 <= D_i
 <= N)间连续的房间。服务台的接待工作也很简单：
 如果存在r满足编号为r..r+D_i-1的房间均空着，他
 就将这一批顾客安排到这些房间入住；如果没有满足
 条件的r，他会道歉说没有足够的空房间，请顾客们
 另找一家宾馆。如果有多个满足条件的r，服务员会
 选择其中最小的一个。

旅馆中的退房服务也是批量进行的。每一个退房请求由
2个数字X_i、D_i描述，表示编号为X_i..X_i+D_i-1 (1
 <= X_i <= N-D_i+1)房间中的客人全部离开。退房前，
 请求退掉的房间中的一些，甚至是所有，可能本来就无人入住。

而你的工作，就是写一个程序，帮服务员为旅客安排房间
。你的程序一共需要处理M 个按输入次序到来的住店或退
房的请求。第一个请求到来前，旅店中所有房间都是空闲的。
题解：直接就线段树维护最大连续子序列个个数 
*/
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
const int N= 50000+100;
struct node
{
	int l,r; 
	int ansl;
	int sum;//最大连续空位
	int endl;
	int startsum;
	int endsum;   
	int add;
}tr[N<<3];
int n;
int m;
void build(int u,int l,int r)
{
	tr[u]={l,r,l,r-l+1,l,r-l+1,r-l+1,0};
	if(l==r)return ;
	int mid=(l+r)>>1;
	build(u<<1,l,mid);
	build(u<<1|1,mid+1,r);
	return ;
}
void pushdown(int u)
{
	if(tr[u].add==0)return ; 
	if(tr[u].add==1)
	{
		tr[u<<1].add=tr[u<<1|1].add=1;
		tr[u<<1].startsum=tr[u<<1].endsum=tr[u<<1].sum=0;
		tr[u<<1|1].startsum=tr[u<<1|1].endsum=tr[u<<1|1].sum=0;	
	}
	if(tr[u].add==2)
	{
		tr[u<<1].add=tr[u<<1|1].add=2;
		tr[u<<1].startsum=tr[u<<1].endsum=tr[u<<1].sum=tr[u<<1].r-tr[u<<1].l+1;
		tr[u<<1|1].startsum=tr[u<<1|1].endsum=tr[u<<1|1].sum=tr[u<<1|1].r-tr[u<<1|1].l+1;	
		
	 } 
	tr[u].add=0;
	return ;
}

void pushup(int u)
{
	if(tr[u<<1].sum==tr[u<<1].r-tr[u<<1].l+1)
	{
		tr[u].startsum=tr[u<<1].sum+tr[u<<1|1].startsum;
	}
	else tr[u].startsum=tr[u<<1].startsum;
	 
	if(tr[u<<1|1].sum==tr[u<<1|1].r-tr[u<<1|1].l+1)
	{
		tr[u].endsum=tr[u<<1|1].sum+tr[u<<1].endsum;
		tr[u].endl=tr[u<<1].endl;
	}
	else {
		tr[u].endsum=tr[u<<1|1].endsum;
		tr[u].endl=tr[u<<1|1].endl;
	} 
	
	tr[u].sum=0;
	if(tr[u].sum<=tr[u<<1|1].sum)
	{
		tr[u].sum=tr[u<<1|1].sum;
		tr[u].ansl=tr[u<<1|1].ansl;
	}
	if(tr[u].sum<=tr[u<<1].endsum+tr[u<<1|1].startsum)
	{
		tr[u].sum=tr[u<<1].endsum+tr[u<<1|1].startsum;
		tr[u].ansl=tr[u<<1].endl;
	}
	
	//
	if(tr[u].sum<=tr[u<<1].sum)
	{
		tr[u].sum=tr[u<<1].sum;
		tr[u].ansl=tr[u<<1].ansl;
	}
	return ;
}

void modify1(int u,int l,int r)
{
	pushdown(u);
	if(tr[u].l>=l&&tr[u].r<=r)
	{
		tr[u]={tr[u].l,tr[u].r,tr[u].l,0,tr[u].r+1,0,0,1};// 
		return ;
	}
	int mid=(tr[u].l+tr[u].r)>>1;
	if(l<=mid)modify1(u<<1,l,r);
	if(r>mid)modify1(u<<1|1,l,r);
	pushup(u);
}

int query(int u,int cnt)
{
	pushdown(u);
	if(tr[u].l==tr[u].r)return tr[u].l; 
	if(tr[u<<1].sum>=cnt)return query(u<<1,cnt);
	if(tr[u<<1].endsum+tr[u<<1|1].startsum>=cnt){
	//	cout<<tr[u<<1].endl;
		return ((tr[u].l+tr[u].r)>>1) - tr[u<<1].endsum+1;
	}
	else return query(u<<1|1,cnt);
//	return tr[u].ansl;
}

//void print(int u,int l,int r)
//{
//	if(l==r){
//		printf("左边界%d 右边界%d 最大连续子段和%d  最大连续字段和左边界%d 前缀%d 后缀%d 后缀左边界%d 0的蓝标记%d 1的蓝标记%d\n",tr[u].l,tr[u].r,tr[u].sum,tr[u].ansl,tr[u].startsum,tr[u].endsum,tr[u].endl,tr[u].add,tr[u].add1);
//		return ;
//	}
//	int mid=(l+r)>>1;
//	print(u<<1,l,mid);
//	print(u<<1|1,mid+1,r);
//	printf("左边界%d 右边界%d 最大连续子段和%d  最大连续字段和左边界%d 前缀%d 后缀%d 后缀左边界%d 0的蓝标记%d 1的蓝标记%d\n",tr[u].l,tr[u].r,tr[u].sum,tr[u].ansl,tr[u].startsum,tr[u].endsum,tr[u].endl,tr[u].add,tr[u].add1);
//	return ;
//}
void modify2(int u,int l,int r)//置1 
{
	pushdown(u);
	if(tr[u].l>=l&&tr[u].r<=r)
	{
		tr[u]={tr[u].l,tr[u].r,tr[u].l,tr[u].r-tr[u].l+1,tr[u].l,tr[u].r-tr[u].l+1,tr[u].r-tr[u].l+1,2};
		return ;
	}
	int mid=(tr[u].l+tr[u].r)>>1;
	if(l<=mid)modify2(u<<1,l,r);
	if(r>mid)modify2(u<<1|1,l,r);
	pushup(u);
}
int main()
{
//	ifstream input("C:\\Users\\HUAWEI\\Desktop\\P2894_2.in");
//	freopen("C:\\Users\\HUAWEI\\Desktop\\P2894_2.in","r",stdin);
//	freopen("C:\\Users\\HUAWEI\\Desktop\\123.out","w",stdout);
//	if (input.fail())
//	{
//		cout << "File does not exist" << endl;
//		cout << "Exit program" << endl;
//		return 0;
//	}
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0); 
	cin>>n>>m;
	build(1,1,n);
//	print(1,1,n);
	for(int i=1;i<=m;i++)
	{
		
		int f;
		cin>>f;
		if(f==1)
		{
			int cnt;
			cin>>cnt;
			if(tr[1].sum>=cnt)
			{
			//printf("修改前\n");
		//	print(1,1,n); 
			int l=query(1,cnt);
//			if(l==195)
//			{
//				printf("%d  %d\n\n\n\n\n",i,cnt);
//			}
			//print(1,1,n);
			//printf("查询后\n");
			//print(1,1,n); 
			cout<<l<<endl;
			modify1(1,l,l+cnt-1);
		//	printf("修改后\n");
		//	print(1,1,n);
			}
			else cout<<0<<endl;
		///	print(1,1,n);
		}
		else if(f==2)
		{
			int x;
			int y;
			cin>>x>>y;
			modify2(1,x,x+y-1);
	//		print(1,1,n);
		}
	//	cout<<1<<endl; 
	}
	return 0;
 } 
