/*
题意：线段树模板题单点修改（维护最大值就行了） 
题解： 
*/
#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;
const int N=200000+1000;
struct node
{
	int l,r;
	int Max;
}tr[N*8+1000];
int a[N];
int n;
int m;
void pushup(int u)
{
	tr[u].Max=max(tr[u<<1].Max,tr[u<<1|1].Max);
	return ;
}
void build(int u,int l,int r)
{
	if(l==r)
	{
		tr[u]={l,r,a[l]};
		return ;
	}
	tr[u]={l,r};
	int mid=(l+r)>>1;
	build(u<<1,l,mid);
	build(u<<1|1,mid+1,r);
	pushup(u);
}
int query(int u,int l,int r)
{
	if(tr[u].l>=l&&tr[u].r<=r)
	{
		return tr[u].Max;
	}
	int mid=(tr[u].l+tr[u].r)>>1;
	int t=0;
	if(l<=mid)t=query(u<<1,l,r);
	if(r>mid)t=max(query(u<<1|1,l,r),t);
	return t;
} 
void modify(int u,int i,int x)
{
	if(tr[u].l==tr[u].r&&tr[u].l==i)
	{
		tr[u].Max=x;
		return ;
	}
	int mid=(tr[u].l+tr[u].r)>>1;
	if(i<=mid)modify(u<<1,i,x);
	else modify(u<<1|1,i,x);
	pushup(u);
	
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	while(cin>>n>>m)
	{
		for(int i=1;i<=n;i++)
		{
			cin>>a[i];
		}
		build(1,1,n);
		while(m--)
		{
			char ch[4];
			cin>>ch;
			if(ch[0]=='Q')
			{
				int l,r;
				cin>>l>>r;
				cout<<query(1,l,r)<<endl;;
			}
			else {
				int i,m;
				cin>>i>>m;
				modify(1,i,m);
			}
		}
	}
	return 0;
}
